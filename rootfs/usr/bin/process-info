#!/bin/bash
# Copyright (c) 2021 LG Electronics, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

DEVICE_ID="$1"
SET_ID="$2"
# START, READ_PS_INFO_ENTER, READING_PSINFO, END_READ_PSINFO,READ_OTHERS, END
STATE="START_READING_PSINFO"

ps aux | while read line
do
  USER=$(echo $line | cut -d ' ' -f 1 )
  PID=$(echo $line | cut -d ' ' -f 2 )
  CPU=$(echo $line | cut -d ' ' -f 3 )
  MEM=$(echo $line | cut -d ' ' -f 4 )
  VSZ=$(echo $line | cut -d ' ' -f 5 )
  RSS=$(echo $line | cut -d ' ' -f 6 )
  TTY=$(echo $line | cut -d ' ' -f 7 )
  STAT=$(echo $line | cut -d ' ' -f 8 )
  START=$(echo $line | cut -d ' ' -f 9 )
  TIME=$(echo $line | cut -d ' ' -f 10 )
  BINCMD="$(echo $line | cut -d ' ' -f 11 )"
  CMD="$(echo $line | cut -d ' ' -f 11- )"


  if [ $STATE == "ADD_READING_PSINFO" ] ; then
     printf "\n"
     STATE="READING_PSINFO"
  fi
  case "$STATE" in
  "START_READING_PSINFO")
     STATE="READING_PSINFO";
     ;;
  "READING_PSINFO")
     printf "{ \"device_id\" : \"%s\","  ${DEVICE_ID}
     printf " \"set_id\" : \"%s\","  "${SET_ID}"
     printf " \"info_type\" : \"psinfo\","
     printf " \"psinfo\": {"
     printf " \"USER\" : \"%s\", " "${USER}"
     printf   "\"PID\" : \"%s\"," "${PID}"
     printf   "\"%%CPU\" : %s," "${CPU}"
     printf   "\"%%MEM\" : %s," "${MEM}"
     printf   "\"VSZ\" : %s, " "${VSZ}"
     printf   "\"RSS\" : %s, " "${RSS}"
     printf   "\"TTY\" : \"%s\", " "${TTY}"
     printf   "\"STAT\" : \"%s\", " "${STAT}"
     printf   "\"START\" : \"%s\", " "${START}"
     printf   "\"TIME\" : \"%s\", " "${TIME}"
     printf   "\"BinaryName\" : \"%s\"," "${BINCMD}"
     printf   "\"CMD\" : \"%s\"}}" "${CMD}"
     STATE="ADD_READING_PSINFO";
    ;;
  "END_READ_PSINFO")
    break;
    ;;
  *)
    echo "invalid state \"$state\""
    ;;
  esac
done
printf "\n"
